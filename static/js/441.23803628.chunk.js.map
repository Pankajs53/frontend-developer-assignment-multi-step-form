{"version":3,"file":"static/js/441.23803628.chunk.js","mappings":"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","sources":["components/forms/FirstForm.jsx","components/forms/SecondForm.jsx","components/forms/FinalPreviewData.jsx","pages/RenderSteps.js","pages/Main.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setCurrStep, setCurrData } from '../../slices/formSlice';\r\n\r\nconst FirstForm = () => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const dispatch = useDispatch();\r\n  const { currData } = useSelector((state) => state.formSlice);\r\n\r\n  // Load form data from localStorage on component mount\r\n  useEffect(() => {\r\n    const storedFormData = JSON.parse(localStorage.getItem('formData'));\r\n    // console.log(\"Logging\",storedFormData)\r\n    if (storedFormData&& storedFormData.currData) {\r\n      setValue('name', storedFormData?.currData?.name || '');\r\n      setValue('email', storedFormData?.currData?.email || '');\r\n      setValue('phone', storedFormData?.currData?.phone || '');\r\n    }\r\n  }, [setValue]); \r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(setCurrData(data)); \r\n    // Move to the next step\r\n    dispatch(setCurrStep(2)); \r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-lg mx-auto mt-10 bg-blue-900 text-white p-6 rounded-lg shadow-md\">\r\n      <h2 className=\"text-2xl font-semibold mb-6\">Step 1: Personal Information</h2>\r\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        {/* Name Field */}\r\n        <div>\r\n          <label htmlFor=\"name\" className=\"block mb-1\">\r\n            Name\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            {...register('name', {\r\n              required: 'Name is required',\r\n              minLength: {\r\n                value: 2,\r\n                message: 'Name should be at least 2 characters',\r\n              },\r\n            })}\r\n            defaultValue={currData.name || ''}\r\n            className={`border border-gray-600 bg-gray-800 text-black p-2 rounded w-full focus:outline-none focus:border-blue-500 ${\r\n              errors.name ? 'border-red-500' : ''\r\n            }`}\r\n          />\r\n          {errors.name && (\r\n            <p className=\"text-red-500 text-sm mt-1\">{errors.name.message}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Email Field */}\r\n        <div>\r\n          <label htmlFor=\"email\" className=\"block mb-1\">\r\n            Email\r\n          </label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            {...register('email', {\r\n              required: 'Email is required',\r\n              pattern: {\r\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                message: 'Invalid email address',\r\n              },\r\n            })}\r\n            defaultValue={currData.email || ''}\r\n            className={`border border-gray-600 bg-gray-800 text-black p-2 rounded w-full focus:outline-none focus:border-blue-500 ${\r\n              errors.email ? 'border-red-500' : ''\r\n            }`}\r\n          />\r\n          {errors.email && (\r\n            <p className=\"text-red-500 text-sm mt-1\">{errors.email.message}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Phone Field */}\r\n        <div>\r\n          <label htmlFor=\"phone\" className=\"block mb-1\">\r\n            Phone\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"phone\"\r\n            {...register('phone', {\r\n              required: 'Phone number is required',\r\n              pattern: {\r\n                value: /^[0-9]{10}$/,\r\n                message: 'Invalid phone number (should be 10 digits)',\r\n              },\r\n            })}\r\n            defaultValue={currData.phone || ''}\r\n            className={`border border-gray-600 bg-gray-800 text-black p-2 rounded w-full focus:outline-none focus:border-blue-500 ${\r\n              errors.phone ? 'border-red-500' : ''\r\n            }`}\r\n          />\r\n          {errors.phone && (\r\n            <p className=\"text-red-500 text-sm mt-1\">{errors.phone.message}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Submit Button */}\r\n        <div className=\"text-center\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition-colors duration-300\"\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FirstForm;\r\n","import React, { useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setCurrStep, setCurrData } from '../../slices/formSlice';\r\n\r\nconst SecondForm = () => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        setValue,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const dispatch = useDispatch();\r\n    const { currData } = useSelector((state) => state.formSlice); \r\n\r\n    // Load form data from localStorage \r\n    useEffect(() => {\r\n        const storedFormData = JSON.parse(localStorage.getItem('formData'));\r\n        console.log(storedFormData.currData)\r\n        if (storedFormData && storedFormData.currData) {\r\n\r\n            //   console.log(\"Here\",storedFormData.currData.address1)  \r\n            setValue('address1', storedFormData.currData.address1 || '');\r\n            setValue('address2', storedFormData.currData.address2 || '');\r\n            setValue('city', storedFormData.currData.city || '');\r\n            setValue('state', storedFormData.currData.state || '');\r\n            setValue('zipCode', storedFormData.currData.zipCode || '');\r\n        }\r\n    }, []); \r\n\r\n    const onSubmit = (data) => {\r\n        // Update Redux state with current form data\r\n        dispatch(setCurrData(data)); \r\n        // Move to the next step\r\n        dispatch(setCurrStep(3)); \r\n    };\r\n\r\n    return (\r\n        <div className=\"max-w-lg mx-auto mt-10 bg-blue-900 text-white p-6 rounded-lg shadow-md\">\r\n            <h2 className=\"text-2xl font-semibold mb-6\">Step 2: Address Information</h2>\r\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\r\n                {/* Address Line 1 Field */}\r\n                <div>\r\n                    <label htmlFor=\"address1\" className=\"block mb-1\">Address Line 1</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"address1\"\r\n                        {...register('address1', {\r\n                            required: 'Address Line 1 is required',\r\n                        })}\r\n                        defaultValue={currData.address1 || ''}\r\n                        className={`border border-gray-600 bg-gray-800 text-black p-2 rounded w-full focus:outline-none focus:border-blue-500 ${errors.address1 ? 'border-red-500' : ''\r\n                            }`}\r\n                    />\r\n                    {errors.address1 && (\r\n                        <p className=\"text-red-500 text-sm mt-1\">{errors.address1.message}</p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Address Line 2 Field */}\r\n                <div>\r\n                    <label htmlFor=\"address2\" className=\"block mb-1\">Address Line 2</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"address2\"\r\n                        {...register('address2')}\r\n                        defaultValue={currData.address2 || ''}\r\n                        className=\"border border-gray-600 bg-gray-800 text-black p-2 rounded w-full focus:outline-none focus:border-blue-500\"\r\n                    />\r\n                </div>\r\n\r\n                {/* City Field */}\r\n                <div>\r\n                    <label htmlFor=\"city\" className=\"block mb-1\">City</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"city\"\r\n                        {...register('city', {\r\n                            required: 'City is required',\r\n                        })}\r\n                        defaultValue={currData.city || ''}\r\n                        className={`border border-gray-600 bg-gray-800 text-black p-2 rounded w-full focus:outline-none focus:border-blue-500 ${errors.city ? 'border-red-500' : ''\r\n                            }`}\r\n                    />\r\n                    {errors.city && (\r\n                        <p className=\"text-red-500 text-sm mt-1\">{errors.city.message}</p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* State Field */}\r\n                <div>\r\n                    <label htmlFor=\"state\" className=\"block mb-1\">State</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"state\"\r\n                        {...register('state', {\r\n                            required: 'State is required',\r\n                        })}\r\n                        defaultValue={currData.state || ''}\r\n                        className={`border border-gray-600 bg-gray-800 text-black p-2 rounded w-full focus:outline-none focus:border-blue-500 ${errors.state ? 'border-red-500' : ''\r\n                            }`}\r\n                    />\r\n                    {errors.state && (\r\n                        <p className=\"text-red-500 text-sm mt-1\">{errors.state.message}</p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Zip Code Field */}\r\n                <div>\r\n                    <label htmlFor=\"zipCode\" className=\"block mb-1\">Zip Code</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"zipCode\"\r\n                        {...register('zipCode', {\r\n                            required: 'Zip Code is required',\r\n                            pattern: {\r\n                                value: /^\\d{5}(-\\d{4})?$/,\r\n                                message: 'Invalid zip code format',\r\n                            },\r\n                        })}\r\n                        defaultValue={currData.zipCode || ''}\r\n                        className={`border border-gray-600 bg-gray-800 text-black p-2 rounded w-full focus:outline-none focus:border-blue-500 ${errors.zipCode ? 'border-red-500' : ''\r\n                            }`}\r\n                    />\r\n                    {errors.zipCode && (\r\n                        <p className=\"text-red-500 text-sm mt-1\">{errors.zipCode.message}</p>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Submit Button */}\r\n                <div className=\"text-center\">\r\n\r\n                </div>\r\n\r\n                <div className='flex flex-row justify-between mt-6'>\r\n                    <button\r\n                        onClick={()=>dispatch(setCurrStep(1))}\r\n                        className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition-colors duration-300\"\r\n                    >\r\n                        Previous\r\n                    </button>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition-colors duration-300\"\r\n                    >\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SecondForm;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { setCurrStep } from '../../slices/formSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport toast from 'react-hot-toast';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst FinalPreviewData = () => {\r\n    // Fetching data from Redux state\r\n    const { currData } = useSelector((state) => state.formSlice);\r\n\r\n    const dispatch = useDispatch();\r\n    const handleEditClick = () => {\r\n        // Dispatch the setCurrStep action to update the current step\r\n        dispatch(setCurrStep(1));\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmitData = () =>{\r\n        toast.success(\"Data SUBMITTED SUCCESS\")\r\n        navigate('/dataSubmitSuccess')    \r\n    }   \r\n\r\n    return (\r\n        <div className=\"max-w-md mx-auto mt-10 bg-white rounded-lg shadow-lg overflow-hidden\">\r\n            <div className=\"px-6 py-4\">\r\n                <div className=\"font-bold text-xl mb-2\">Final Review Data</div>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    {/* Name */}\r\n                    <div className=\"bg-blue-900 text-white p-4 rounded-lg shadow-md\">\r\n                        <h2 className=\"text-lg font-semibold mb-2\">Name:</h2>\r\n                        <p className=\"text-base\">{currData.name}</p>\r\n                    </div>\r\n                    {/* Email */}\r\n                    <div className=\"bg-blue-900 text-white p-4 rounded-lg shadow-md\">\r\n                        <h2 className=\"text-lg font-semibold mb-2\">Email:</h2>\r\n                        <p className=\"text-base\">{currData.email}</p>\r\n                    </div>\r\n                    {/* Phone */}\r\n                    <div className=\"bg-blue-900 text-white p-4 rounded-lg shadow-md\">\r\n                        <h2 className=\"text-lg font-semibold mb-2\">Phone:</h2>\r\n                        <p className=\"text-base\">{currData.phone}</p>\r\n                    </div>\r\n                    {/* Address Line 1 */}\r\n                    <div className=\"bg-blue-900 text-white p-4 rounded-lg shadow-md\">\r\n                        <h2 className=\"text-lg font-semibold mb-2\">Address Line 1:</h2>\r\n                        <p className=\"text-base\">{currData.address1}</p>\r\n                    </div>\r\n                    {/* Address Line 2 */}\r\n                    <div className=\"bg-blue-900 text-white p-4 rounded-lg shadow-md\">\r\n                        <h2 className=\"text-lg font-semibold mb-2\">Address Line 2:</h2>\r\n                        <p className=\"text-base\">{currData.address2}</p>\r\n                    </div>\r\n                    {/* City */}\r\n                    <div className=\"bg-blue-900 text-white p-4 rounded-lg shadow-md\">\r\n                        <h2 className=\"text-lg font-semibold mb-2\">City:</h2>\r\n                        <p className=\"text-base\">{currData.city}</p>\r\n                    </div>\r\n                    {/* State */}\r\n                    <div className=\"bg-blue-900 text-white p-4 rounded-lg shadow-md\">\r\n                        <h2 className=\"text-lg font-semibold mb-2\">State:</h2>\r\n                        <p className=\"text-base\">{currData.state}</p>\r\n                    </div>\r\n                    {/* Zip Code */}\r\n                    <div className=\"bg-blue-900 text-white p-4 rounded-lg shadow-md\">\r\n                        <h2 className=\"text-lg font-semibold mb-2\">Zip Code:</h2>\r\n                        <p className=\"text-base\">{currData.zipCode}</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='flex flex-row justify-between mt-6'>\r\n                    <button onClick={handleEditClick} className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition-colors duration-300\">\r\n                        Edit\r\n                    </button>\r\n\r\n                    <button onClick={handleSubmitData} className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition-colors duration-300\">\r\n                        SUBMIT DATA\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FinalPreviewData;\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport FirstForm from '../components/forms/FirstForm';\r\nimport SecondForm from '../components/forms/SecondForm';\r\nimport FinalPreviewData from '../components/forms/FinalPreviewData';\r\nimport { FaCheck } from 'react-icons/fa';\r\n\r\nconst RenderSteps = () => {\r\n\r\n  const {currStep} = useSelector((state)=>state.formSlice)\r\n\r\n  const steps = [\r\n    {\r\n      id: 1,\r\n    },\r\n    {\r\n      id: 2,\r\n    },\r\n    {\r\n      id: 3,\r\n    },\r\n  ];\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative mb-2 flex w-full justify-center\">\r\n        {steps.map((item,index) => (\r\n          <React.Fragment key={item.id}>\r\n            <div\r\n              className=\"flex flex-col items-center \"\r\n            >\r\n              <button\r\n                className={`grid cursor-default aspect-square w-[34px] place-items-center rounded-full border-[1px] ${\r\n                  currStep === item.id\r\n                    ? \"border-yellow-50 bg-yellow-900 text-yellow-50\"\r\n                    : \"border-richblack-700 bg-richblack-800 text-richblack-300\"\r\n                } ${currStep > item.id && \"bg-yellow-50 text-yellow-50\"}} `}\r\n              >\r\n                {currStep > item.id ? (\r\n                  <FaCheck className=\"font-bold text-richblack-900\" />\r\n                ) : (\r\n                  item.id\r\n                )}\r\n              </button>\r\n              \r\n            </div>\r\n            {item.id !== steps.length && (\r\n              <>\r\n                <div\r\n                  className={`h-[calc(34px/2)] w-[33%]  border-dashed border-b-2 ${\r\n                  currStep > item.id  ? \"border-yellow-50\" : \"border-richblack-500\"\r\n                } `}\r\n                ></div>\r\n              </>\r\n            )}\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n        \r\n\r\n      {currStep === 1 && <FirstForm />}  \r\n      {currStep === 2 && <SecondForm />}\r\n      {currStep === 3 && <FinalPreviewData />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RenderSteps","import React from 'react'\r\nimport RenderSteps from './RenderSteps'\r\n\r\nconst Main = () => {\r\n  return (\r\n    <div className='mt-[200px] mb-[200px]'>\r\n        {<RenderSteps/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main"],"names":["FirstForm","register","handleSubmit","setValue","formState","errors","useForm","dispatch","useDispatch","currData","useSelector","state","formSlice","useEffect","storedFormData","JSON","parse","localStorage","getItem","_storedFormData$currD","_storedFormData$currD2","_storedFormData$currD3","name","email","phone","_jsxs","className","children","_jsx","onSubmit","data","setCurrData","setCurrStep","htmlFor","type","id","required","minLength","value","message","defaultValue","concat","pattern","SecondForm","console","log","address1","address2","city","zipCode","onClick","FinalPreviewData","navigate","useNavigate","handleEditClick","handleSubmitData","toast","success","RenderSteps","currStep","steps","_Fragment","map","item","index","React","FaCheck","length","Main"],"sourceRoot":""}